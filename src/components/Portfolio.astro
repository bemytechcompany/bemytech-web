---
interface Props {
  t: (key: string) => string;
}

const { t } = Astro.props;

const projects = [
  {
    id: 'project1',
    bgGradient: 'from-blue-500/20 to-purple-500/20',
    iconColor: 'text-blue-400',
    url: 'https://www.google.com'
  },
  {
    id: 'project2', 
    bgGradient: 'from-green-500/20 to-teal-500/20',
    iconColor: 'text-green-400',
    url: 'https://www.google.com'
  },
  {
    id: 'project3',
    bgGradient: 'from-purple-500/20 to-pink-500/20',
    iconColor: 'text-purple-400',
    url: 'https://www.google.com'
  },
  {
    id: 'project4',
    bgGradient: 'from-orange-500/20 to-red-500/20',
    iconColor: 'text-orange-400',
    url: 'https://www.google.com'
  },
  {
    id: 'project5',
    bgGradient: 'from-cyan-500/20 to-blue-500/20',
    iconColor: 'text-cyan-400',
    url: 'https://www.google.com'
  }
];
---

<section 
  id="portfolio" 
  class="relative min-h-screen bg-primary overflow-hidden"
  data-scroll-section
>
  <!-- Header -->
  <div section-header class="fixed z-10 pt-20 pb-12 px-6 text-center">
    <h2 class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6">
      <span class="block" data-portfolio-title>{t("portfolio.title")}</span>
    </h2>
    <p 
      class="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto mb-8"
      data-portfolio-subtitle
    >
      {t("portfolio.subtitle")}
    </p>
    <div class="text-accent font-medium text-sm" data-scroll-hint>
      {t("portfolio.scrollHint")}
    </div>
  </div>

  <!-- Hexagonal Background Elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none z-5">
    <div class="absolute top-20 left-10 w-16 h-16 opacity-10">
      <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
        <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
      </svg>
    </div>
    <div class="absolute bottom-40 right-20 w-24 h-24 opacity-5">
      <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
        <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
      </svg>
    </div>
    <div class="absolute top-1/2 left-1/4 w-12 h-12 opacity-8">
      <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
        <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
      </svg>
    </div>
  </div>

  <!-- Horizontal Scroll Container -->
  <div 
    class="horizontal-container relative z-10"
    data-horizontal-section
  >
    <div 
      class="horizontal-track flex gap-8 md:gap-12 pl-6"
      data-horizontal-track
    >
      {projects.map((project, index) => (
        <div 
          class="project-card flex-shrink-0 w-80 md:w-96 lg:w-[28rem]"
          data-project-card
          data-project-index={index}
        >
          <!-- Project Card -->
          <div class={`
            relative h-96 md:h-[28rem] rounded-2xl overflow-hidden
            bg-gradient-to-br ${project.bgGradient}
            backdrop-blur-sm border border-white/10
            group hover:border-accent/30 transition-all duration-500
            cursor-pointer shadow-xl hover:shadow-2xl
            transform hover:scale-105 hover:-translate-y-2
          `}>
            
            <!-- 3D Model Placeholder / Canvas -->
            <div class="absolute inset-0 flex items-center justify-center">
              <div 
                class="three-placeholder w-full h-full bg-gradient-to-br from-gray-900/50 to-gray-800/50 flex items-center justify-center"
                data-three-canvas={project.id}
              >
                <!-- Enhanced Hexagonal 3D Placeholder -->
                <div class="relative">
                  <div class={`
                    w-32 h-32 md:w-40 md:h-40 ${project.iconColor} 
                    opacity-30 group-hover:opacity-60 transition-all duration-500
                    transform group-hover:scale-110 group-hover:rotate-12
                  `}>
                    <svg viewBox="0 0 100 100" class="w-full h-full fill-current">
                      <defs>
                        <linearGradient id={`projectGradient-${project.id}`} x1="0%" y1="0%" x2="100%" y2="100%">
                          <stop offset="0%" style="stop-color:currentColor;stop-opacity:0.8" />
                          <stop offset="100%" style="stop-color:currentColor;stop-opacity:0.4" />
                        </linearGradient>
                        <filter id={`projectGlow-${project.id}`}>
                          <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                          <feMerge>
                            <feMergeNode in="coloredBlur"/>
                            <feMergeNode in="SourceGraphic"/>
                          </feMerge>
                        </filter>
                      </defs>
                      <polygon 
                        points="50,2 86,25 86,75 50,98 14,75 14,25" 
                        stroke="currentColor" 
                        stroke-width="2" 
                        fill="none"
                        filter={`url(#projectGlow-${project.id})`}
                      />
                      <polygon 
                        points="50,15 75,30 75,70 50,85 25,70 25,30" 
                        stroke="currentColor" 
                        stroke-width="1" 
                        fill={`url(#projectGradient-${project.id})`}
                        opacity="0.3"
                      />
                      <circle 
                        cx="50" 
                        cy="50" 
                        r="8" 
                        fill="currentColor" 
                        opacity="0.8"
                        filter={`url(#projectGlow-${project.id})`}
                      />
                    </svg>
                  </div>
                  <!-- Future Three.js integration point -->
                  <canvas 
                    class="absolute inset-0 w-full h-full opacity-0"
                    data-three-scene={project.id}
                  ></canvas>
                </div>
              </div>
            </div>

            <!-- Project Info Overlay -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent">
              <div class="absolute bottom-0 left-0 right-0 p-6 md:p-8">
                
                <!-- Category Tag -->
                <div class="mb-3">
                  <span class="inline-block px-3 py-1 text-xs font-semibold bg-accent/20 text-accent rounded-full border border-accent/30">
                    {t(`portfolio.${project.id}.category`)}
                  </span>
                </div>

                <!-- Title -->
                <h3 class="text-xl md:text-2xl font-bold text-white mb-3 group-hover:text-accent transition-colors duration-300">
                  {t(`portfolio.${project.id}.title`)}
                </h3>

                <!-- Description -->
                <p class="text-gray-300 text-sm md:text-base mb-4 line-clamp-3">
                  {t(`portfolio.${project.id}.description`)}
                </p>

                <!-- Technologies -->
                <div class="mb-4">
                  <p class="text-xs text-gray-400 mb-2">{t("portfolio.technologies")}:</p>
                  <p class="text-sm text-accent">{t(`portfolio.${project.id}.tech`)}</p>
                </div>

                <!-- CTA Button -->
                <button class="
                  inline-flex items-center gap-2 px-4 py-2 
                  bg-accent/10 hover:bg-accent/20 
                  border border-accent/30 hover:border-accent/50
                  text-accent hover:text-white
                  rounded-lg text-sm font-medium
                  transition-all duration-300
                  group-hover:scale-105
                ">
                  {t("portfolio.viewProject")}
                  <svg class="w-4 h-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                  </svg>
                </button>

              </div>
            </div>

            <!-- Hexagonal Hover Effect -->
            <div class="absolute top-4 right-4 w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
              <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
                <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
              </svg>
            </div>

          </div>
        </div>
      ))}
      
      <!-- Spacer for proper ending -->
      <div class="flex-shrink-0 w-6"></div>
    </div>
  </div>
</section>

<style>
  /* Horizontal scroll track positioning */
  .horizontal-container {
    position: relative;
    height: 70vh;
    display: flex;
    align-items: center;
  }

  .horizontal-track {
    will-change: transform;
  }

  /* 3D preparation for Three.js */
  .three-placeholder {
    perspective: 1000px;
  }

  /* Enhanced project card animations */
  .project-card {
    will-change: transform;
    transform: translateZ(0);
  }

  /* Video optimization */
  video {
    filter: brightness(0.8) contrast(1.1) saturate(1.2);
  }

  /* Line clamp utility */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Hardware acceleration */
  .project-card,
  .three-placeholder,
  .horizontal-track {
    transform: translateZ(0);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .horizontal-container {
      height: auto;
      min-height: 100vh;
      padding: 2rem 0;
    }
    
    .horizontal-track {
      flex-direction: column;
      gap: 2rem;
      padding: 0 1rem;
    }
    
    .project-card {
      width: 100%;
      max-width: 400px;
      margin: 0 auto;
    }
  }

  /* Accessibility - Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .project-card {
      transition: none;
    }
    
    .project-card:hover {
      transform: translateZ(0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Dynamically import GSAP
    const { gsap } = await import('gsap');
    const { ScrollTrigger } = await import('gsap/ScrollTrigger');
    
    // Register ScrollTrigger plugin
    gsap.registerPlugin(ScrollTrigger);

    // Get elements
    const horizontalSection = document.querySelector('[data-horizontal-section]') as HTMLElement;
    const sectionHeader = document.querySelector('[section-header]') as HTMLElement;
    const horizontalTrack = document.querySelector('[data-horizontal-track]') as HTMLElement;
    const projectCards = document.querySelectorAll('[data-project-card]');

    if (horizontalSection && horizontalTrack && projectCards.length) {
      // Calculate scroll distance
      const trackWidth = horizontalTrack.scrollWidth;
      const sectionWidth = horizontalSection.offsetWidth;
      const scrollDistance = trackWidth - sectionWidth;

      // Create horizontal scroll animation
      const horizontalScroll = gsap.to(horizontalTrack, {
        x: -scrollDistance,
        ease: "none",
        scrollTrigger: {
          trigger: horizontalSection,
          start: "top+=-20 33%",
          end: () => `+=${scrollDistance + window.innerHeight}`,
          scrub: 1,
          pin: true,
          anticipatePin: 1,
          invalidateOnRefresh: true,
          onUpdate: (self) => {
            // Update scroll hint opacity
            const scrollHint = document.querySelector('[data-scroll-hint]') as HTMLElement;
            if (scrollHint) {
              scrollHint.style.opacity = String(1 - self.progress);
            }
          }
        }
      });

      // Animate project cards on scroll
      projectCards.forEach((card, index) => {
        gsap.fromTo(card, 
          {
            opacity: 0.3,
            scale: 0.8,
            rotateY: 45
          },
          {
            opacity: 1,
            scale: 1,
            rotateY: 0,
            ease: "power2.out",
            scrollTrigger: {
              trigger: card,
              start: "left 80%",
              end: "left 20%",
              horizontal: true,
              containerAnimation: horizontalScroll,
              scrub: 1,
              toggleActions: "play none none reverse"
            }
          }
        );

        // Add stagger effect for card content
        const cardContent = card.querySelectorAll('h3, p, button, .three-placeholder');
        gsap.fromTo(cardContent,
          {
            y: 50,
            opacity: 0
          },
          {
            y: 0,
            opacity: 1,
            duration: 0.6,
            stagger: 0.1,
            ease: "power2.out",
            scrollTrigger: {
              trigger: card,
              start: "left 70%",
              end: "left 30%",
              horizontal: true,
              containerAnimation: horizontalScroll,
              scrub: 1
            }
          }
        );
      });

      // Add parallax effect to background hexagons
      const hexagons = document.querySelectorAll('#portfolio svg');
      hexagons.forEach((hex, index) => {
        gsap.to(hex, {
          rotation: 360,
          duration: 10 + (index * 2),
          repeat: -1,
          ease: "none"
        });

        gsap.to(hex, {
          x: `${(index % 2 === 0 ? 1 : -1) * 100}px`,
          y: `${(index % 2 === 0 ? -1 : 1) * 50}px`,
          ease: "none",
          scrollTrigger: {
            trigger: horizontalSection,
            start: "top bottom",
            end: "bottom top",
            scrub: 2
          }
        });
      });
    }

    // Simple video optimization
    const video = document.querySelector('#portfolio video') as HTMLVideoElement;
    if (video) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            video.play().catch(() => {
              video.style.display = 'none';
            });
          } else {
            video.pause();
          }
        });
      }, { threshold: 0.1 });
      
      observer.observe(video);
    }
  });
</script> 