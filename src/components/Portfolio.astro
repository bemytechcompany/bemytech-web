---
// Portfolio.astro - Sección de portafolio con scroll horizontal
// Refactorizado para usar GSAP Manager y mejor UX

interface Props {
  t: (key: string) => string;
}

const { t } = Astro.props;

const projects = [
  {
    id: 'project1',
    bgGradient: 'from-blue-500/20 to-purple-500/20',
    iconColor: 'text-blue-400',
    url: 'https://raffle.bemytech.io/'
  },
  {
    id: 'project2', 
    bgGradient: 'from-green-500/20 to-teal-500/20',
    iconColor: 'text-green-400',
    url: 'https://castevo.com/'
  },
  {
    id: 'project3',
    bgGradient: 'from-purple-500/20 to-pink-500/20',
    iconColor: 'text-purple-400',
    url: 'https://viatika.bemytech.io/'
  },
  {
    id: 'project4',
    bgGradient: 'from-orange-500/20 to-red-500/20',
    iconColor: 'text-orange-400',
    url: 'https://visualemotion.bemytech.io/landing'
  },
  {
    id: 'project5',
    bgGradient: 'from-cyan-500/20 to-blue-500/20',
    iconColor: 'text-cyan-400',
    url: 'https://www.rikdrive.com/'
  }
];
---

<section 
  id="portfolio" 
  class="relative min-h-screen bg-primary overflow-hidden"
  data-scroll-section
>
  <!-- Header del Portfolio (texto fijo) -->
  <div class="portfolio-header-text fixed top-0 left-0 w-full z-30 pt-8 pb-8 px-6 text-center pointer-events-none opacity-0 invisible bg-primary/95 backdrop-blur-md border-b border-white/10" data-portfolio-text-header>
    <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 drop-shadow-lg">
      {t("portfolio.title")}
    </h2>
    <p class="text-base md:text-lg text-gray-300 max-w-2xl mx-auto mb-4 drop-shadow-md">
      {t("portfolio.subtitle")}
    </p>
    <div class="text-accent font-medium text-sm animate-pulse drop-shadow-md" data-scroll-hint>
      {t("portfolio.scrollHint")}
    </div>
  </div>

  <!-- Header estático para móvil -->
  <div class="portfolio-static-header block md:hidden relative z-20 pt-8 pb-4 px-6 text-center">
    <h2 class="text-2xl font-bold text-white mb-3">
      {t("portfolio.title")}
    </h2>
    <p class="text-base text-gray-300 max-w-2xl mx-auto mb-3">
      {t("portfolio.subtitle")}
    </p>
  </div>

  <!-- Hexagonal Background Elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none z-5">
    <div class="absolute top-20 left-10 w-16 h-16 opacity-10">
      <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
        <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
      </svg>
    </div>
    <div class="absolute bottom-40 right-20 w-24 h-24 opacity-5">
      <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
        <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
      </svg>
    </div>
    <div class="absolute top-1/2 left-1/4 w-12 h-12 opacity-8">
      <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
        <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
      </svg>
    </div>
  </div>

  <!-- Horizontal Scroll Container -->
  <div class="horizontal-container relative z-20 pt-4 md:pt-40" data-horizontal-section>
    <div 
      class="horizontal-track flex gap-4 md:gap-12 pl-4 md:pl-6"
      data-horizontal-track
    >
      {projects.map((project, index) => (
        <div 
          class="project-card flex-shrink-0 w-80 md:w-96 lg:w-[28rem]"
          data-project-card
          data-project-index={index}
        >
          <!-- Project Card -->
          <div class={`
            relative h-96 md:h-[28rem] rounded-2xl overflow-hidden
            bg-gradient-to-br ${project.bgGradient}
            backdrop-blur-sm border border-white/10
            group hover:border-accent/30 transition-all duration-500
            cursor-pointer shadow-xl hover:shadow-2xl
            transform hover:scale-105 hover:-translate-y-2
          `}>
            
            <!-- 3D Model Placeholder / Canvas -->
            <div class="absolute inset-0 flex items-center justify-center">
              <div 
                class="three-placeholder w-full h-full bg-gradient-to-br from-gray-900/50 to-gray-800/50 flex items-center justify-center"
                data-three-canvas={project.id}
              >
                <!-- Enhanced Hexagonal 3D Placeholder -->
                <div class="relative">
                  <div class={`
                    w-32 h-32 md:w-40 md:h-40 ${project.iconColor} 
                    opacity-30 group-hover:opacity-60 transition-all duration-500
                    transform group-hover:scale-110 group-hover:rotate-12
                  `}>
                    <svg viewBox="0 0 100 100" class="w-full h-full fill-current">
                      <defs>
                        <linearGradient id={`projectGradient-${project.id}`} x1="0%" y1="0%" x2="100%" y2="100%">
                          <stop offset="0%" style="stop-color:currentColor;stop-opacity:0.8" />
                          <stop offset="100%" style="stop-color:currentColor;stop-opacity:0.4" />
                        </linearGradient>
                        <filter id={`projectGlow-${project.id}`}>
                          <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                          <feMerge>
                            <feMergeNode in="coloredBlur"/>
                            <feMergeNode in="SourceGraphic"/>
                          </feMerge>
                        </filter>
                      </defs>
                      <polygon 
                        points="50,2 86,25 86,75 50,98 14,75 14,25" 
                        stroke="currentColor" 
                        stroke-width="2" 
                        fill="none"
                        filter={`url(#projectGlow-${project.id})`}
                      />
                      <polygon 
                        points="50,15 75,30 75,70 50,85 25,70 25,30" 
                        stroke="currentColor" 
                        stroke-width="1" 
                        fill={`url(#projectGradient-${project.id})`}
                        opacity="0.3"
                      />
                      <circle 
                        cx="50" 
                        cy="50" 
                        r="8" 
                        fill="currentColor" 
                        opacity="0.8"
                        filter={`url(#projectGlow-${project.id})`}
                      />
                    </svg>
                  </div>
                  <!-- Future Three.js integration point -->
                  <canvas 
                    class="absolute inset-0 w-full h-full opacity-0"
                    data-three-scene={project.id}
                  ></canvas>
                </div>
              </div>
            </div>

            <!-- Project Info Overlay -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/20 to-transparent flex flex-col">
              
              <!-- Top Section - Category -->
              <div class="p-6 md:p-8">
                <span class="inline-block px-3 py-1 text-xs font-semibold bg-accent/20 text-accent rounded-full border border-accent/30">
                  {t(`portfolio.${project.id}.category`)}
                </span>
              </div>

              <!-- Middle Section - Content Info -->
              <div class="flex-1 flex flex-col justify-end p-6 md:p-8">
                
                <!-- Title -->
                <h3 class="text-xl md:text-2xl font-bold text-white mb-3 group-hover:text-accent transition-colors duration-300">
                  {t(`portfolio.${project.id}.title`)}
                </h3>

                <!-- Description -->
                <p class="text-gray-300 text-sm md:text-base mb-4 line-clamp-3">
                  {t(`portfolio.${project.id}.description`)}
                </p>

                <!-- Technologies -->
                <div class="mb-6">
                  <p class="text-xs text-gray-400 mb-2">{t("portfolio.technologies")}:</p>
                  <p class="text-sm text-accent">{t(`portfolio.${project.id}.tech`)}</p>
                </div>

                <!-- CTA Button Centrado -->
                <div class="flex justify-center">
                  <a 
                    href={project.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="
                      inline-flex items-center gap-2 px-6 py-3 
                      bg-accent/10 hover:bg-accent/20 
                      border border-accent/30 hover:border-accent/50
                      text-accent hover:text-white
                      rounded-lg text-sm font-medium
                      transition-all duration-300
                      group-hover:scale-105 hover:shadow-lg hover:shadow-accent/25
                      transform hover:-translate-y-1
                    "
                  >
                    {t("portfolio.viewProject")}
                    <svg class="w-4 h-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                    </svg>
                  </a>
                </div>

              </div>
            </div>

            <!-- Hexagonal Hover Effect -->
            <div class="absolute top-4 right-4 w-8 h-8 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
              <svg viewBox="0 0 100 100" class="w-full h-full text-accent fill-current">
                <polygon points="50,2 86,25 86,75 50,98 14,75 14,25" />
              </svg>
            </div>

          </div>
        </div>
      ))}
      
      <!-- Spacer para ver la última card completa -->
      <div class="flex-shrink-0 w-80 md:w-96"></div>
    </div>
  </div>
</section>

<style>
  /* Header de texto fijo (solo texto, sin fondo) */
  .portfolio-header-text {
    will-change: transform, opacity, visibility;
    margin-top: 2rem; /* Margen para el nav */
    z-index: 30; /* Debajo del nav que tiene z-index 1000 */
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  /* Horizontal scroll track positioning */
  .horizontal-container {
    position: relative;
    height: calc(100vh - 8rem); /* Altura ajustada para el header fijo */
    display: flex;
    align-items: center;
  }

  .horizontal-track {
    will-change: transform;
    backface-visibility: hidden;
    transform: translateZ(0);
  }

  /* 3D preparation for Three.js */
  .three-placeholder {
    perspective: 1000px;
    will-change: transform;
  }

  /* Enhanced project card animations */
  .project-card {
    will-change: transform;
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  /* Line clamp utility */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Hardware acceleration for all animated elements */
  .project-card,
  .three-placeholder,
  .horizontal-track {
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  /* Responsive adjustments - Móvil: Layout vertical sin scroll horizontal */
  @media (max-width: 768px) {
    #portfolio {
      overflow-x: hidden !important; /* Prevenir cualquier scroll horizontal */
    }
    
    .horizontal-container {
      height: auto !important;
      min-height: auto !important;
      padding: 2rem 0 !important;
      margin-top: 0 !important;
      /* Layout vertical estándar para móvil */
      display: block !important;
      overflow: visible !important;
    }
    
    .horizontal-track {
      /* Layout vertical normal en móvil */
      display: flex !important;
      flex-direction: column !important;
      gap: 2rem !important;
      padding: 0 1rem !important;
      width: 100% !important;
      height: auto !important;
      /* Desactivar completamente el transform de GSAP */
      transform: none !important;
      will-change: auto !important;
    }
    
    .project-card {
      width: 100% !important;
      max-width: 380px !important;
      margin: 0 auto !important;
      flex-shrink: 1 !important;
      /* Reset todas las animaciones de scroll horizontal */
      opacity: 1 !important;
      transform: translateZ(0) !important;
      scale: 1 !important;
    }

    /* Header de texto responsivo en móvil */
    .portfolio-header-text {
      display: none !important; /* Ocultar completamente en móvil */
    }

    /* Mostrar header estático en móvil */
    .portfolio-static-header {
      display: block !important;
      position: relative !important;
      background: transparent !important;
      padding: 2rem 1rem !important;
      text-align: center !important;
    }
    
    /* Asegurar que el contenedor no sea pinneado en móvil */
    .horizontal-container[style*="position"] {
      position: relative !important;
      top: auto !important;
      left: auto !important;
      transform: none !important;
    }
  }

  /* Asegurar que en desktop funcione el scroll horizontal */
  @media (min-width: 769px) {
    .horizontal-container {
      height: calc(100vh - 8rem);
      display: flex;
      align-items: center;
    }
    
    .horizontal-track {
      flex-direction: row;
      gap: 3rem;
      padding-left: 1.5rem;
    }
    
    .project-card {
      flex-shrink: 0;
      width: 28rem;
    }

    /* Ocultar header estático en desktop */
    .portfolio-static-header {
      display: none;
    }
  }

  /* Accessibility - Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .project-card,
    .horizontal-track {
      transition: none !important;
      animation: none !important;
    }
    
    .project-card:hover {
      transform: translateZ(0) !important;
    }
    
    .animate-pulse {
      animation: none !important;
    }
  }
</style>

<script>
  import { gsapManager, gsap } from '../utils/gsapManager';

  document.addEventListener('DOMContentLoaded', () => {
    // Crear contexto para Portfolio
    const PORTFOLIO_CONTEXT = 'portfolio';
    gsapManager.createContext(PORTFOLIO_CONTEXT);

    // Verificar reduced motion
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      console.log('Reduced motion detected - simplified portfolio animations');
      return;
    }

    // Función para verificar si es móvil
    const checkIsMobile = () => window.innerWidth <= 768;
    let isMobile = checkIsMobile();

    // Obtener elementos
    const horizontalSection = document.querySelector('[data-horizontal-section]') as HTMLElement;
    const horizontalTrack = document.querySelector('[data-horizontal-track]') as HTMLElement;
    const projectCards = document.querySelectorAll('[data-project-card]');
    const scrollHint = document.querySelector('[data-scroll-hint]') as HTMLElement;
    const portfolioTextHeader = document.querySelector('[data-portfolio-text-header]') as HTMLElement;
    const portfolioSection = document.querySelector('#portfolio') as HTMLElement;

    if (!horizontalSection || !horizontalTrack || !projectCards.length) {
      console.warn('Portfolio elements not found');
      return;
    }

    // Función para limpiar todas las animaciones de scroll horizontal
    const cleanupHorizontalAnimations = () => {
      // Resetear estilos en móvil
      if (horizontalTrack) {
        horizontalTrack.style.transform = '';
        horizontalTrack.style.willChange = '';
      }
      
      // Resetear todas las cards
      projectCards.forEach(card => {
        const element = card as HTMLElement;
        element.style.opacity = '';
        element.style.transform = '';
        element.style.scale = '';
        
        // Resetear contenido de las cards
        const cardContent = element.querySelectorAll('h3, p, a, .three-placeholder');
        cardContent.forEach(content => {
          const contentElement = content as HTMLElement;
          contentElement.style.transform = '';
          contentElement.style.opacity = '';
        });
      });
      
      // Limpiar ScrollTriggers relacionados con scroll horizontal
      gsapManager.cleanupContext(PORTFOLIO_CONTEXT);
      gsapManager.createContext(PORTFOLIO_CONTEXT);
    };

    // En móvil, asegurar que no hay scroll horizontal
    if (isMobile) {
      cleanupHorizontalAnimations();
    }

    // Solo ejecutar scroll horizontal en desktop
    if (!isMobile) {
      // Calcular distancia de scroll con padding extra para la última card
      const trackWidth = horizontalTrack.scrollWidth;
      const sectionWidth = horizontalSection.offsetWidth;
      const extraPadding = 400; // Padding extra para ver la última card
      const scrollDistance = trackWidth - sectionWidth + extraPadding;

      // Crear animación de scroll horizontal (solo para las cards)
      const horizontalAnimation = gsap.to(horizontalTrack, {
        x: -scrollDistance,
        ease: "none",
        paused: true
      });

      // Pre-configurar animaciones para evitar delays
      projectCards.forEach((card, index) => {
        // Pre-configurar estado inicial de las cards
        gsap.set(card, {
          opacity: 0.3,
          scale: 0.8,
          rotateY: 45
        });
        
        // Pre-configurar contenido de las cards
        const cardContent = card.querySelectorAll('h3, p, a, .three-placeholder');
        gsap.set(cardContent, {
          y: 50,
          opacity: 0
        });
      });

      // Mostrar header de texto solo durante el scroll horizontal de Portfolio
      if (portfolioTextHeader) {
        gsapManager.createScrollTrigger(PORTFOLIO_CONTEXT, {
          trigger: portfolioSection,
          start: "top+=20 15%",
          end: () => `+=${scrollDistance + window.innerHeight}`,
          onEnter: () => {
            gsap.to(portfolioTextHeader, { 
              opacity: 1, 
              visibility: 'visible',
              duration: 0.3 
            });
          },
          onLeave: () => {
            gsap.to(portfolioTextHeader, { 
              opacity: 0, 
              visibility: 'hidden',
              duration: 0.3 
            });
          },
          onEnterBack: () => {
            gsap.to(portfolioTextHeader, { 
              opacity: 1, 
              visibility: 'visible',
              duration: 0.3 
            });
          },
          onLeaveBack: () => {
            gsap.to(portfolioTextHeader, { 
              opacity: 0, 
              visibility: 'hidden',
              duration: 0.3 
            });
          }
        });
      }

      // Pin toda la sección durante el scroll horizontal
      const horizontalScroll = gsapManager.createScrollTrigger(PORTFOLIO_CONTEXT, {
        trigger: portfolioSection,
        start: "top+=20 15%",
        end: () => `+=${scrollDistance + window.innerHeight}`,
        scrub: 1,
        pin: true,
        anticipatePin: 1,
        invalidateOnRefresh: true,
        onUpdate: (self) => {
          // Solo mover las cards horizontalmente, el texto queda fijo
          horizontalAnimation.progress(self.progress);
          
          // Actualizar opacidad del scroll hint
          if (scrollHint) {
            gsap.set(scrollHint, { opacity: 1 - self.progress });
          }
        }
      });

      // Animar tarjetas de proyecto en el scroll (solo desktop)
      projectCards.forEach((card, index) => {
        // Animación de entrada de tarjeta
        const cardAnimation = gsap.to(card, {
          opacity: 1,
          scale: 1,
          rotateY: 0,
          ease: "power2.out",
          paused: true
        });
        
        gsapManager.createScrollTrigger(PORTFOLIO_CONTEXT, {
          trigger: card,
          start: "left 80%",
          end: "left 20%",
          horizontal: true,
          containerAnimation: horizontalAnimation,
          scrub: 1,
          toggleActions: "play none none reverse",
          onUpdate: (self) => {
            cardAnimation.progress(self.progress);
          }
        });

        // Stagger effect para contenido de tarjetas
        const cardContent = card.querySelectorAll('h3, p, a, .three-placeholder');
        const contentAnimation = gsap.to(cardContent, {
          y: 0,
          opacity: 1,
          duration: 0.6,
          stagger: 0.1,
          ease: "power2.out",
          paused: true
        });
        
        gsapManager.createScrollTrigger(PORTFOLIO_CONTEXT, {
          trigger: card,
          start: "left 70%",
          end: "left 30%",
          horizontal: true,
          containerAnimation: horizontalAnimation,
          scrub: 1,
          onUpdate: (self) => {
            contentAnimation.progress(self.progress);
          }
        });
      });
    } else {
      // Animaciones suaves para móvil
      projectCards.forEach((card, index) => {
        // Animación de entrada con stagger
        gsap.fromTo(card, {
          y: 80,
          opacity: 0,
          scale: 0.9
        }, {
          y: 0,
          opacity: 1,
          scale: 1,
          duration: 0.8,
          delay: index * 0.2,
          ease: "power2.out",
          scrollTrigger: {
            trigger: card,
            start: "top 90%",
            end: "top 30%",
            toggleActions: "play none none reverse"
          }
        });

        // Animación de contenido
        const cardContent = card.querySelectorAll('h3, p, a, .three-placeholder');
        gsap.fromTo(cardContent, {
          y: 30,
          opacity: 0
        }, {
          y: 0,
          opacity: 1,
          duration: 0.6,
          delay: (index * 0.2) + 0.3,
          stagger: 0.1,
          ease: "power2.out",
          scrollTrigger: {
            trigger: card,
            start: "top 80%",
            toggleActions: "play none none reverse"
          }
        });
      });
    }

    // Efecto parallax para hexágonos de fondo (común para desktop y móvil)
    const hexagons = document.querySelectorAll('#portfolio svg');
    hexagons.forEach((hex, index) => {
      // Rotación continua
      const rotationTimeline = gsapManager.createTimeline(PORTFOLIO_CONTEXT, { repeat: -1 });
      rotationTimeline.to(hex, {
        rotation: 360,
        duration: 10 + (index * 2),
        ease: "none"
      });

      // Movimiento parallax
      const parallaxAnimation = gsap.to(hex, {
        x: `${(index % 2 === 0 ? 1 : -1) * 100}px`,
        y: `${(index % 2 === 0 ? -1 : 1) * 50}px`,
        ease: "none",
        paused: true
      });

      gsapManager.createScrollTrigger(PORTFOLIO_CONTEXT, {
        trigger: isMobile ? portfolioSection : horizontalSection,
        start: "top bottom",
        end: "bottom top",
        scrub: 2,
        onUpdate: (self) => {
          parallaxAnimation.progress(self.progress);
        }
      });
    });

    // Optimización de video si existe
    const video = document.querySelector('#portfolio video') as HTMLVideoElement;
    if (video) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            video.play().catch(() => {
              video.style.display = 'none';
            });
          } else {
            video.pause();
          }
        });
      }, { threshold: 0.1 });
      
      observer.observe(video);
    }

    // Manejar cambios de tamaño de pantalla
    let resizeTimeout: ReturnType<typeof setTimeout>;
    
    const handleResize = () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const wasMobile = isMobile;
        isMobile = checkIsMobile();
        
        // Si cambió de móvil a desktop o viceversa, reinicializar
        if (wasMobile !== isMobile) {
          cleanupHorizontalAnimations();
          
          if (!isMobile) {
            // Cambió a desktop - habilitar scroll horizontal
            console.log('Switched to desktop - enabling horizontal scroll');
            window.location.reload(); // Recargar para reinicializar correctamente
          } else {
            // Cambió a móvil - deshabilitar scroll horizontal
            console.log('Switched to mobile - disabling horizontal scroll');
            cleanupHorizontalAnimations();
          }
        }
        
        gsapManager.refreshScrollTriggers();
      }, 250);
    };

    gsapManager.registerEventListener(PORTFOLIO_CONTEXT, window, 'resize', handleResize, { passive: true });

    // Debug info para desarrollo
    if (import.meta.env?.DEV) {
      console.log('Portfolio GSAP context created:', gsapManager.getDebugInfo());
      console.log('Portfolio config:', {
        isMobile,
        screenWidth: window.innerWidth,
        scrollHorizontal: !isMobile,
        cardsCount: projectCards.length
      });
      if (!isMobile) {
        console.log('Desktop mode: Scroll horizontal enabled');
      } else {
        console.log('Mobile mode: Vertical layout with stagger animations');
      }
    }
  });
</script> 