---
// Hero.astro - Parallax Hero section with three background layers
// Features: Layered parallax scrolling, GSAP animations, performance optimized

interface Props {
  t: (key: string) => string;
}

const { t } = Astro.props;
---

<!-- <section
  id="hero"
  class="relative h-screen w-full overflow-hidden bg-[#0D0D0D] flex items-center justify-center"
  aria-label={t("hero.title")}
> -->
<section
  id="hero"
  class="relative h-screen w-full overflow-hidden flex items-center justify-center"
  aria-label={t("hero.title")}
>
  <!-- Note: Background layers are now handled by ParallaxLayers component -->

  <!-- Content Layer -->
  <div class="relative z-30 text-center px-4 sm:px-6 lg:px-8 max-w-4xl mx-auto">
    <!-- Main Title -->
    <h1
      class="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight"
      data-hero-title
    >
      <span class="block text-white">{t("hero.title")}</span>
      <span class="block text-accent mt-2">{t("hero.titleAccent")}</span>
    </h1>

    <!-- Subtitle -->
    <p
      class="text-lg sm:text-xl md:text-2xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto"
      data-hero-subtitle
    >
      {t("hero.subtitle")}
    </p>

    <!-- CTA Button -->
    <div
      class="flex flex-col sm:flex-row gap-4 justify-center items-center"
      data-hero-cta
    >
      <a
        href="#contact"
        class="inline-flex items-center justify-center gap-2
          px-8 py-4 text-lg font-semibold
          bg-accent hover:bg-accent/90
          text-black rounded-full
          transition-all duration-300 ease-out
          transform hover:scale-105 hover:-translate-y-1
          shadow-lg shadow-accent/25 hover:shadow-xl hover:shadow-accent/40
          focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 focus:ring-offset-black"
        aria-label={`${t("hero.cta")} - Contact us`}
      >
        {t("hero.cta")}
        <svg
          class="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>

      <!-- Scroll Indicator -->
      <div class="flex flex-col items-center text-white/60 mt-8 sm:mt-16">
        <span class="text-sm uppercase tracking-wider mb-2"
          >{t("hero.scrollText")}</span
        >
        <div class="w-0.5 h-8 bg-accent animate-pulse"></div>
      </div>
    </div>
  </div>
</section>

<style>
  /* EXTREME performance optimization for aggressive parallax */
  #hero {
    transform: translateZ(0);
    perspective: 2000px;
    perspective-origin: center center;
    overflow: hidden;
    will-change: transform;
  }

  /* Ultra-optimized parallax layers for EXTREME movement */
  [data-parallax-bg],
  [data-parallax-mid],
  [data-parallax-fore] {
    backface-visibility: hidden;
    transform: translateZ(0);
    transform-style: preserve-3d;
    will-change: transform, filter, opacity;
    isolation: isolate;
    contain: layout style paint;
  }

  /* AGGRESSIVE content animations setup */
  [data-hero-title],
  [data-hero-subtitle],
  [data-hero-cta] {
    will-change: transform, opacity, filter;
    transform: translateZ(0);
    transform-style: preserve-3d;
    backface-visibility: hidden;
    isolation: isolate;
    contain: layout style paint;
  }

  /* Force GPU acceleration for all animated elements */
  [data-parallax-bg],
  [data-parallax-mid],
  [data-parallax-fore],
  [data-hero-title],
  [data-hero-subtitle],
  [data-hero-cta] {
    transform: translate3d(0, 0, 0);
  }

  /* Responsive text sizing */
  @media (max-width: 640px) {
    [data-hero-title] {
      font-size: 2.25rem;
      line-height: 2.5rem;
    }

    [data-hero-subtitle] {
      font-size: 1.125rem;
      line-height: 1.75rem;
    }
  }

  /* Accessibility - Complete motion disable for extreme effects */
  @media (prefers-reduced-motion: reduce) {
    #hero {
      perspective: none !important;
    }

    [data-parallax-bg],
    [data-parallax-mid],
    [data-parallax-fore],
    [data-hero-title],
    [data-hero-subtitle],
    [data-hero-cta] {
      transform: none !important;
      animation: none !important;
      transition: none !important;
      filter: none !important;
      will-change: auto !important;
    }

    .animate-pulse {
      animation: none !important;
    }
  }

  /* Focus styles for accessibility */
  a:focus-visible {
    outline: 2px solid #8bc53f;
    outline-offset: 2px;
  }
</style>

<script>
  // Hero parallax implementation with GSAP
  document.addEventListener("DOMContentLoaded", async () => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia(
      "(prefers-reduced-motion: reduce)",
    ).matches;

    if (prefersReducedMotion) {
      return; // Skip animations if user prefers reduced motion
    }

    try {
      // Dynamically import GSAP modules
      const { gsap } = await import("gsap");
      const { ScrollTrigger } = await import("gsap/ScrollTrigger");

      // Register ScrollTrigger plugin
      gsap.registerPlugin(ScrollTrigger);

      // Get elements
      const heroSection = document.getElementById("hero");

      // Note: Background parallax is now handled by ParallaxLayers component
      // Focus on content animations only
      const heroTitle = document.querySelector(
        "[data-hero-title]",
      ) as HTMLElement;
      const heroSubtitle = document.querySelector(
        "[data-hero-subtitle]",
      ) as HTMLElement;
      const heroCta = document.querySelector("[data-hero-cta]") as HTMLElement;

      if (!heroSection) return;

      // Background and layer parallax is now handled by ParallaxLayers component

      // EXTREME content animations with INSANE 3D effects
      if (heroTitle) {
        gsap.to(heroTitle, {
          y: -400,
          x: -150,
          opacity: 0.05,
          scale: 0.3,
          rotation: 25,
          rotateX: 70,
          rotateY: 45,
          rotateZ: 15,
          z: -500,
          skewX: 20,
          skewY: 10,
          ease: "none",
          scrollTrigger: {
            trigger: heroSection,
            start: "top+=80 top",
            end: "bottom-=100 top",
            scrub: 0.1,
            invalidateOnRefresh: true,
          },
        });
      }

      if (heroSubtitle) {
        gsap.to(heroSubtitle, {
          y: -300,
          x: 120,
          opacity: 0.08,
          scale: 0.4,
          rotation: -20,
          rotateX: -50,
          rotateY: -35,
          rotateZ: -10,
          z: -400,
          skewX: -15,
          skewY: -8,
          ease: "none",
          scrollTrigger: {
            trigger: heroSection,
            start: "top+=80 top",
            end: "bottom-=100 top",
            scrub: 0.15,
            invalidateOnRefresh: true,
          },
        });
      }

      if (heroCta) {
        gsap.to(heroCta, {
          y: -250,
          x: -80,
          opacity: 0.1,
          scale: 0.5,
          rotation: 15,
          rotateX: 40,
          rotateY: 30,
          rotateZ: 8,
          z: -300,
          skewX: 12,
          skewY: 6,
          ease: "none",
          scrollTrigger: {
            trigger: heroSection,
            start: "top+=80 top",
            end: "bottom-=100 top",
            scrub: 0.2,
            invalidateOnRefresh: true,
          },
        });
      }

      // DRAMATIC entrance animations with EXTREME effects
      const tl = gsap.timeline({ delay: 0.3 });

      if (heroTitle) {
        tl.fromTo(
          heroTitle,
          {
            y: 200,
            x: -100,
            opacity: 0,
            scale: 0.3,
            rotation: -45,
            rotateX: 90,
            rotateY: 45,
            z: -500,
            skewX: 30,
          },
          {
            y: 0,
            x: 0,
            opacity: 1,
            scale: 1,
            rotation: 0,
            rotateX: 0,
            rotateY: 0,
            z: 0,
            skewX: 0,
            duration: 1.5,
            ease: "back.out(2)",
          },
        );
      }

      if (heroSubtitle) {
        tl.fromTo(
          heroSubtitle,
          {
            y: 150,
            x: 80,
            opacity: 0,
            scale: 0.4,
            rotation: 30,
            rotateX: -60,
            rotateY: -30,
            z: -300,
            skewX: -20,
          },
          {
            y: 0,
            x: 0,
            opacity: 1,
            scale: 1,
            rotation: 0,
            rotateX: 0,
            rotateY: 0,
            z: 0,
            skewX: 0,
            duration: 1.2,
            ease: "back.out(1.7)",
          },
          "-=1",
        );
      }

      if (heroCta) {
        tl.fromTo(
          heroCta,
          {
            y: 100,
            x: -60,
            opacity: 0,
            scale: 0.5,
            rotation: -20,
            rotateX: 45,
            rotateY: 30,
            z: -200,
            skewX: 15,
          },
          {
            y: 0,
            x: 0,
            opacity: 1,
            scale: 1,
            rotation: 0,
            rotateX: 0,
            rotateY: 0,
            z: 0,
            skewX: 0,
            duration: 1,
            ease: "back.out(1.5)",
          },
          "-=0.8",
        );
      }


      // Clean up on page visibility change or unload
      document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "visible") {
          ScrollTrigger.refresh(true);
        }
      });
      // Refresh ScrollTrigger on resize
      let resizeTimeout: ReturnType<typeof setTimeout>;
      window.addEventListener("resize", () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          ScrollTrigger.refresh();
        }, 100);
      });
    } catch (error) {
      console.warn("GSAP loading failed:", error);
      // Graceful degradation - show content without animations
      const elements = [
        document.querySelector("[data-hero-title]"),
        document.querySelector("[data-hero-subtitle]"),
        document.querySelector("[data-hero-cta]"),
      ];

      elements.forEach((el) => {
        if (el) {
          (el as HTMLElement).style.opacity = "1";
          (el as HTMLElement).style.transform = "none";
        }
      });
    }

    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible") {
        ScrollTrigger.refresh(true);
      }
    });
  });
</script>

