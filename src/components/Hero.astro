---
// Hero.astro - Hero section refactorizado con GSAP Manager
// Evita conflictos con otros componentes usando el sistema centralizado

interface Props {
  t: (key: string) => string;
}

const { t } = Astro.props;
---

<section
  id="hero"
  class="relative h-screen w-full overflow-hidden flex items-center justify-center"
  aria-label={t("hero.title")}
>
  <!-- Content Layer -->
  <div class="relative z-30 text-center px-4 sm:px-6 lg:px-8 max-w-4xl mx-auto">
    <!-- Main Title -->
    <h1
      class="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight"
      data-hero-title
    >
      <span class="block text-white">{t("hero.title")}</span>
      <span class="block text-accent mt-2">{t("hero.titleAccent")}</span>
    </h1>

    <!-- Subtitle -->
    <p
      class="text-lg sm:text-xl md:text-2xl text-gray-300 mb-8 leading-relaxed max-w-3xl mx-auto"
      data-hero-subtitle
    >
      {t("hero.subtitle")}
    </p>

    <!-- CTA Button -->
    <div
      class="flex flex-col sm:flex-row gap-4 justify-center items-center"
      data-hero-cta
    >
      <a
        href="#contact"
        class="inline-flex items-center justify-center gap-2
          px-8 py-4 text-lg font-semibold
          bg-accent hover:bg-accent/90
          text-black rounded-full
          transition-all duration-300 ease-out
          transform hover:scale-105 hover:-translate-y-1
          shadow-lg shadow-accent/25 hover:shadow-xl hover:shadow-accent/40
          focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 focus:ring-offset-black"
        aria-label={`${t("hero.cta")} - Contact us`}
      >
        {t("hero.cta")}
        <svg
          class="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>

      <!-- Scroll Indicator -->
      <div class="flex flex-col items-center text-white/60 mt-8 sm:mt-16">
        <span class="text-sm uppercase tracking-wider mb-2"
          >{t("hero.scrollText")}</span
        >
        <div class="w-0.5 h-8 bg-accent animate-pulse"></div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Optimización de rendimiento para parallax */
  #hero {
    transform: translateZ(0);
    will-change: transform;
    backface-visibility: hidden;
  }

  /* Optimización para elementos animados */
  [data-hero-title],
  [data-hero-subtitle],
  [data-hero-cta] {
    will-change: transform, opacity;
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  /* Responsive text sizing */
  @media (max-width: 640px) {
    [data-hero-title] {
      font-size: 2.25rem;
      line-height: 2.5rem;
    }

    [data-hero-subtitle] {
      font-size: 1.125rem;
      line-height: 1.75rem;
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    #hero,
    [data-hero-title],
    [data-hero-subtitle],
    [data-hero-cta] {
      transform: none !important;
      animation: none !important;
      transition: none !important;
      will-change: auto !important;
    }

    .animate-pulse {
      animation: none !important;
    }
  }

  /* Focus styles */
  a:focus-visible {
    outline: 2px solid #8bc53f;
    outline-offset: 2px;
  }
</style>

<script>
  import { gsapManager, gsap } from '../utils/gsapManager';

  document.addEventListener("DOMContentLoaded", () => {
    // Crear contexto para Hero
    const HERO_CONTEXT = 'hero';
    gsapManager.createContext(HERO_CONTEXT);

    // Verificar reduced motion
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      console.log('Reduced motion detected - simplified hero animations');
      return;
    }

    // Obtener elementos
    const heroSection = document.getElementById("hero");
    const heroTitle = document.querySelector("[data-hero-title]") as HTMLElement;
    const heroSubtitle = document.querySelector("[data-hero-subtitle]") as HTMLElement;
    const heroCta = document.querySelector("[data-hero-cta]") as HTMLElement;

    if (!heroSection || !heroTitle || !heroSubtitle || !heroCta) {
      console.warn('Hero elements not found');
      return;
    }

    // Animaciones de parallax en scroll
    gsapManager.createScrollTrigger(HERO_CONTEXT, {
      trigger: heroSection,
      start: "top+=80 top",
      end: "bottom-=100 top",
      scrub: 0.1,
      invalidateOnRefresh: true,
      onUpdate: (self) => {
        const progress = self.progress;
        
        // Título con movimiento dramático
        gsap.set(heroTitle, {
          y: -400 * progress,
          x: -150 * progress,
          opacity: Math.max(0.05, 1 - progress * 0.95),
          scale: Math.max(0.3, 1 - progress * 0.7),
          rotation: 25 * progress
        });

        // Subtítulo con movimiento contrario
        gsap.set(heroSubtitle, {
          y: -300 * progress,
          x: 120 * progress,
          opacity: Math.max(0.08, 1 - progress * 0.92),
          scale: Math.max(0.4, 1 - progress * 0.6),
          rotation: -20 * progress
        });

        // CTA con movimiento moderado
        gsap.set(heroCta, {
          y: -250 * progress,
          x: -80 * progress,
          opacity: Math.max(0.1, 1 - progress * 0.9),
          scale: Math.max(0.5, 1 - progress * 0.5),
          rotation: 15 * progress
        });
      }
    });

    // Animaciones de entrada
    const entranceTimeline = gsapManager.createTimeline(HERO_CONTEXT, { delay: 0.3 });

    entranceTimeline
      .fromTo(heroTitle, {
        y: 200,
        x: -100,
        opacity: 0,
        scale: 0.3,
        rotation: -45
      }, {
        y: 0,
        x: 0,
        opacity: 1,
        scale: 1,
        rotation: 0,
        duration: 1.5,
        ease: "back.out(2)"
      })
      .fromTo(heroSubtitle, {
        y: 150,
        x: 80,
        opacity: 0,
        scale: 0.4,
        rotation: 30
      }, {
        y: 0,
        x: 0,
        opacity: 1,
        scale: 1,
        rotation: 0,
        duration: 1.2,
        ease: "back.out(1.7)"
      }, "-=1")
      .fromTo(heroCta, {
        y: 100,
        x: -60,
        opacity: 0,
        scale: 0.5,
        rotation: -20
      }, {
        y: 0,
        x: 0,
        opacity: 1,
        scale: 1,
        rotation: 0,
        duration: 1,
        ease: "back.out(1.5)"
      }, "-=0.8");

    // Debug info para desarrollo
    if (import.meta.env?.DEV) {
      console.log('Hero GSAP context created:', gsapManager.getDebugInfo());
    }
  });
</script>

